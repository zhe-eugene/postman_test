{
	"info": {
		"_postman_id": "583a52b6-87ca-480a-a09d-8ad5e71cfea9",
		"name": "QA auto",
		"description": "1. Register users on sistem запит\n    \n\nPre-request Script  \nРеалізована генерація паролю та мейлу, присвоення значень в змінну колекції userPassword та newPass\n\n2\\. Create new car запит\n\nTests script - присвоєння отриманого id машини в змінну carID",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9500983",
		"_collection_link": "https://pps-qa-teame.postman.co/workspace/Postman-Study~cc717477-f423-409c-b536-039b718f7364/collection/9500983-583a52b6-87ca-480a-a09d-8ad5e71cfea9?action=share&source=collection_link&creator=9500983"
	},
	"item": [
		{
			"name": "Register users on sistem",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"// Generate password function\r",
							"\r",
							"function gen_password(len) {\r",
							"    var password = \"\";\r",
							"    var symbols = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"    for (var i = 0; i < len; i++) {\r",
							"        password += symbols.charAt(Math.floor(Math.random() * symbols.length));\r",
							"    }\r",
							"    return password;\r",
							"}\r",
							"\r",
							"// Set registration password and new password\r",
							"\r",
							"pm.collectionVariables.set(\"userPassword\", gen_password(15));\r",
							"pm.collectionVariables.set(\"newPass\", gen_password(15));\r",
							"\r",
							"// Generate email\r",
							"\r",
							"var endings = [\"yahoo.com\", \"gmail.com\"],\r",
							"    symbols = \"qwertyuiopasdfghjklzxcvbnm1234567890\";\r",
							"\r",
							"function rand(min, max) {\r",
							"    return (min + Math.random() * (max - min + 1)) | 0\r",
							"}\r",
							"\r",
							"function getRandomStr(len) {\r",
							"    var ret = \"\"\r",
							"    for (var i = 0; i < len; i++)\r",
							"        ret += symbols[rand(0, symbols.length - 1)];\r",
							"    return ret;\r",
							"}\r",
							"\r",
							"function getEmail() {\r",
							"    var a = getRandomStr(rand(3, 5)),\r",
							"        b = getRandomStr(rand(3, 5));\r",
							"    return a + b + \"@\" + endings[rand(0, endings.length - 1)];\r",
							"}\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"userEmail\", getEmail());\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"status\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"data\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"userId\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"photoFilename\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"distanceUnits\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"currency\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"userId\",\r",
							"                \"photoFilename\",\r",
							"                \"distanceUnits\",\r",
							"                \"currency\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"status\",\r",
							"        \"data\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Set User ID\r",
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"userID\", jsonData.data.userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\",\r\n    \"repeatPassword\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signup",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edits users profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"//Set random name\r",
							"\r",
							"var arrName = ['Barbara', 'Jack', 'Igor', 'Bogdan', 'Ira', 'Mykyta', 'Uliy'];\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", arrayRandElement(arrName));\r",
							"\r",
							"\r",
							"//Set random surname\r",
							"\r",
							"var arrSurname = ['Voznik', 'McCalister', 'Laguta', 'Chuvak', 'Solo', 'Skywalker', 'Weyder'];\r",
							"\r",
							"pm.collectionVariables.set(\"userLastName\", arrayRandElement(arrSurname));\r",
							"\r",
							"//Set random date\r",
							"\r",
							"var arrDate = ['2001-01-12T13:22:09.000Z', '1989-01-12T13:22:09.000Z', '1988-01-12T13:22:09.000Z', '2001-01-12T13:22:09.000Z'];\r",
							"\r",
							"pm.collectionVariables.set(\"dateBirth\", arrayRandElement(arrDate));\r",
							"\r",
							"\r",
							"function arrayRandElement(arr) {\r",
							"    var rand = Math.floor(Math.random() * arr.length);\r",
							"    return arr[rand];\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let name = pm.collectionVariables.get(\"userName\").toString();\r",
							"let lastName = pm.collectionVariables.get(\"userLastName\").toString();\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check edit user name\", () => {\r",
							"        pm.expect(jsonData.data.name).to.eql(name);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Check edit lastName\", () => {\r",
							"        pm.expect(jsonData.data.lastName).to.eql(lastName);\r",
							"    });\r",
							"\r",
							"    \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"photo\": \"{{$randomAvatarImage}}\",\r\n    \"name\": \"{{userName}}\",\r\n    \"lastName\": \"{{userLastName}}\",\r\n    \"dateBirth\": \"{{dateBirth}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/profile",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users profile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Body contains field: \\\"dateBirth\\\"\", () => {\r",
							"        pm.expect(pm.response.text()).to.include(\"dateBirth\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/profile",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edits users password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let userID = pm.collectionVariables.get(\"userID\"); \r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check user ID\", () => {\r",
							"        pm.expect(jsonData.data.userId).to.eql(userID);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"oldPassword\": \"{{userPassword}}\",\r\n    \"password\": \"{{newPass}}\",\r\n    \"repeatPassword\": \"{{newPass}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/users/password",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/auth/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Singnin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.collectionVariables.get(\"userEmail\"));\r",
							"console.log(pm.collectionVariables.get(\"newPass\"));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{newPass}}\",\r\n    \"remember\": {{$randomBoolean}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/auth/signin",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new car",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// save car ID\r",
							"var responseInjson = pm.response.json();\r",
							"pm.collectionVariables.set(\"carID\", responseInjson.data.id);\r",
							"\r",
							"\r",
							"// Tests\r",
							"\r",
							"pm.test(\"Body contains field: \\\"brand\\\"\", () => {\r",
							"        pm.expect(pm.response.text()).to.include(\"brand\");\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 1,\r\n  \"carModelId\": 2,\r\n  \"mileage\": 122\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/cars",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "cars models",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"carBrandId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"carBrandId\",\r",
							"        \"title\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"status\",\r",
							"    \"data\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 1,\r\n  \"carModelId\": 2,\r\n  \"mileage\": 122\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/cars/models/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"cars",
						"models",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new car expense",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var liters = Number(pm.collectionVariables.get(\"liters\"));\r",
							"\r",
							"\r",
							"if (jsonData.data.liters == liters) {\r",
							"    liters += 1;\r",
							"    pm.collectionVariables.set(\"liters\", liters);\r",
							"}\r",
							"\r",
							"\r",
							"let ID = pm.collectionVariables.get(\"carID\"); \r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check car ID\", () => {\r",
							"        pm.expect(jsonData.data.carId).to.eql(ID);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"carId\": {{carID}},\r\n    \"reportedAt\": \"{{$isoTimestamp}}\",\r\n    \"mileage\": 149,\r\n    \"liters\": {{liters}},\r\n    \"totalCost\": 11,\r\n    \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/expenses",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"expenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.unset(\"userName\");\r",
							"pm.collectionVariables.unset(\"userLastName\");\r",
							"pm.collectionVariables.unset(\"userPassword\");\r",
							"pm.collectionVariables.unset(\"newPass\");\r",
							"pm.collectionVariables.unset(\"userEmail\");\r",
							"pm.collectionVariables.unset(\"carID\");\r",
							"pm.collectionVariables.unset(\"dateBirth\");\r",
							"pm.collectionVariables.unset(\"userID\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "liters",
			"value": "11",
			"type": "string"
		},
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userLastName",
			"value": ""
		},
		{
			"key": "dateBirth",
			"value": ""
		},
		{
			"key": "carID",
			"value": ""
		}
	]
}