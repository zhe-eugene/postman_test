{
	"info": {
		"_postman_id": "29717bdb-7c2f-46f9-9880-23b9ca4f8bf5",
		"name": "Check code PS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18416459",
		"_collection_link": "https://pps-teame.postman.co/workspace/PPS-collections-v.2~312a216d-27d3-45d8-b229-95ab1588b290/collection/18416459-29717bdb-7c2f-46f9-9880-23b9ca4f8bf5?action=share&source=collection_link&creator=18416459"
	},
	"item": [
		{
			"name": "api-info check/ update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var arr = []; // for save request data \r",
							"var body = [];// save body for telegram request\r",
							"\r",
							"// Get data from request\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (key in jsonData.payment_systems) {\r",
							"    if (jsonData.payment_systems[key] !== undefined) {\r",
							"        arr.push([key].sort())\r",
							"    }\r",
							"};\r",
							"\r",
							"var arrPSFromCollVariabl = correctFormat(pm.collectionVariables.get(\"arrPS\")); // change for test\r",
							"var arrPSFromRequest = correctFormat(arr); //now from request\r",
							"\r",
							"\r",
							"//Comparison\r",
							"if (arrPSFromRequest.length === arrPSFromCollVariabl.length) {\r",
							"    body = [\r",
							"        { key: \"chat_id\", value: pm.collectionVariables.get(\"chat_id\"), disabled: false },\r",
							"        { key: \"text\", value: \"Check payment system api-info\\nEverything is correct\\nTest pass\", disabled: false }\r",
							"    ];\r",
							"\r",
							"} else if (arrPSFromRequest.length > arrPSFromCollVariabl.length) {\r",
							"\r",
							"    pm.collectionVariables.\r",
							"        set(\"psNameResult\", Comparison(arrPSFromRequest, arrPSFromCollVariabl));\r",
							"\r",
							"    pm.collectionVariables.\r",
							"        set(\"psCountResult\", arrPSFromRequest.length - arrPSFromCollVariabl.length);\r",
							"\r",
							"    body = [\r",
							"        { key: \"chat_id\", value: pm.collectionVariables.get(\"chat_id\"), disabled: false },\r",
							"        { key: \"text\", value: \"Check payment system api-info\\nAdd \" + pm.collectionVariables.get(\"psCountResult\") + \" PS code \" + \"\\nNew: \" + pm.collectionVariables.get(\"psNameResult\"), disabled: false }\r",
							"    ];\r",
							"\r",
							"    // Updating an array for collection variable\r",
							"    pm.collectionVariables.set(\"arrPS\", arr);\r",
							"\r",
							"} else if (arrPSFromRequest.length < arrPSFromCollVariabl.length) {\r",
							"\r",
							"    pm.collectionVariables.\r",
							"        set(\"psNameResult\", Comparison(arrPSFromCollVariabl, arrPSFromRequest));\r",
							"\r",
							"    pm.collectionVariables.\r",
							"        set(\"psCountResult\", arrPSFromCollVariabl.length - arrPSFromRequest.length);\r",
							"\r",
							"    body = [\r",
							"        { key: \"chat_id\", value: pm.collectionVariables.get(\"chat_id\"), disabled: false },\r",
							"        { key: \"text\", value: \"Check payment system api-info\\nMissing \" + pm.collectionVariables.get(\"psCountResult\") + \" PS code \" + \"\\nNot found \" + pm.collectionVariables.get(\"psNameResult\"), disabled: false }\r",
							"    ];\r",
							"}\r",
							"\r",
							"// Array formatting function\r",
							"function correctFormat(arr) {\r",
							"    let regex = /\\[|\\]|\\\"|\\\"/g;\r",
							"    return JSON.stringify(arr).\r",
							"        replace(regex, '').\r",
							"        split(',').\r",
							"        sort();\r",
							"}\r",
							"\r",
							"// Comparison function\r",
							"function Comparison(arr1, arr2) {\r",
							"    Array.prototype.diff = function (a) {\r",
							"        return this.filter(function (i) { return a.indexOf(i) < 0; });\r",
							"    };\r",
							"    return arr1.diff(arr2);\r",
							"}\r",
							"\r",
							"// Telegramm request\r",
							"pm.sendRequest({\r",
							"    url: 'https://api.telegram.org/bot6611554659:AAExevzlYTyubIBiSNBWctVKOmBpOVXrA-0/sendMessage',\r",
							"    method: 'POST',\r",
							"    body: {\r",
							"        mode: 'urlencoded',\r",
							"        urlencoded: body\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    console.log(res);\r",
							"});\r",
							"\r",
							"// Test\r",
							"pm.test(\"Check PS count\", () => {\r",
							"    pm.expect(arrPSFromCollVariabl.length).to.eql(arrPSFromRequest.length);\r",
							"});\r",
							"\r",
							"// Delete collection variables\r",
							"pm.collectionVariables.unset(\"psCountResult\");\r",
							"pm.collectionVariables.unset(\"psNameResult\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Auth",
						"value": "{{auth}}",
						"type": "text"
					},
					{
						"key": "X-PPS-Time",
						"value": "{{time}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{env}}/merchant/api-info",
					"protocol": "https",
					"host": [
						"{{env}}"
					],
					"path": [
						"merchant",
						"api-info"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// set and create transaction id",
					"let uuid = require('uuid')",
					"pm.collectionVariables.set(\"uuid\", uuid.v4());",
					"",
					"var trnid = pm.collectionVariables.get(\"uuid\");",
					"",
					"",
					"// set time//",
					"var time = Date.now();",
					"pm.collectionVariables.set('time', time);",
					"",
					"function ksort(obj){",
					"var keys = Object.keys(obj).sort()",
					", sortedObj = {};",
					"",
					"for(var i in keys) {",
					"sortedObj[keys[i]] = obj[keys[i]];",
					"}",
					"",
					"return sortedObj;",
					"}",
					"",
					"",
					"function generateAuth( query, date, post) {",
					"",
					"",
					"var publicKey = 'd4YbsqPmf31L1X21';",
					"var privateKey = 'uXkKQCjeV7w2RbvXQMBiNuBCQfVF6hI6';",
					"var flags = 0;",
					"var method;",
					"var contentType;",
					"",
					"if (post) {",
					"method = 'post';",
					"contentType = 'application/json';",
					"    if(typeof query['transaction_id'] !== 'undefined'){",
					"        query['transaction_id'] = trnid.toString();",
					"    }",
					"} else {",
					"method = 'get';",
					"contentType = '';",
					"}",
					"",
					"var stringifired = JSON.stringify(ksort(query));",
					"",
					"if(stringifired == '{}'){",
					"    stringifired = '[]';",
					"}",
					"stringifired = stringifired.replace(/\\//g, \"\\\\/\");",
					"var contentStringMD5 = CryptoJS.MD5(stringifired).toString();",
					"",
					"var stringToSign = method+\"\\n\"+contentStringMD5+\"\\n\"+contentType+\"\\n\"+date;",
					"",
					"var signature = CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(stringToSign, privateKey, true));",
					"",
					"",
					"return \"PPS \"+ publicKey + \":\" + signature;",
					"}",
					"",
					"var query;",
					"var isPost;",
					"",
					"",
					"if(pm.request.method == 'POST'){",
					"    query = JSON.parse(pm.request.body.raw);",
					"    isPost = true;",
					"}else{",
					"    var getQuery = pm.request.url.query;",
					"    isPost = false;",
					"    query = {};",
					"    getQuery.each(function(item, i, getQuery) {",
					"        query[item.key] = item.value;",
					"        if(item.value == Number(item.value)){",
					"            query[item.key] = Number(item.value);",
					"        }",
					"    });",
					"}",
					"",
					"",
					"pm.collectionVariables.set('auth', generateAuth(query, time, isPost));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uuid",
			"value": ""
		},
		{
			"key": "time",
			"value": ""
		},
		{
			"key": "auth",
			"value": ""
		},
		{
			"key": "env",
			"value": "master.api.paygate.xim.hattiko.pw",
			"type": "string"
		},
		{
			"key": "arrPS",
			"value": "royal-pay,freekassa,interkassa,blockchain,piastrix,bitgo,qiwi,astropay,winpay,fatpay,cryptoflex,cryptonator,billline,mpesa,leogaming,wonderlandpay,qiwi2,qwallety,rupeepayments,zotapay_v2,finpro,rupeepayments_v2,mtn,fourbill,enot,liberpay,monetbil,anymoney,yo,mtech,apcopay,impaya,zotapay_v3,skypay,unipay,monetix,paykassma,montenex,tranzzo,wallettec,p4f,leogaming2,skypay_v2,interac,freekassa2,wirecapital,ecommpay,betatransfer,airtel,wellspayments,paramount,bitolo,zverpay,payzen,brpay,pionpay,directa24,certus,gps,paysafe,constantpos,jeton,kvitum,gate2way,paystack,nowpayments,raycash,dohone,zeroxprocessing,opay,coinspaid,continentpay,help2pay,alphapo,platon,bitconce,flutterwave,cryptapi,payop,unipesa,unipesa_crypto,blockbee,maxpayments,dallas,muchbetter,pc,bitandpay,paybitx,nodapay,apsmoney,gate_express,payretailers,lumypay,impala,recon,dnspay,payneteasy,apay,p2pay,changecoins,lionpay,easytransfer,tigerpay,trustlypay,kvitum_crypto,payplanet,algorithmic,praxis,exxogate,betterbro,trinkhavale,tlm,algorithmic_v2,nowpayments_cr,paycos,bigidea,dalapay,infipay,gaia,trinkpara,praxis_v2,aifory,coinspay,chcpayment,gamingpe,pagsmile,fxmb,perfectmoney,praxis_v3,gpapara,expay,expay_crypto,payport,payment_gateway,cfpay,transfi,bitolo_v2,s88pay,changelly,ipay,xgateway,aspay",
			"type": "string"
		},
		{
			"key": "chat_id",
			"value": "741144870",
			"type": "string"
		}
	]
}